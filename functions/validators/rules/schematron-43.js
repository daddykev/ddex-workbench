/**
 * ERN 4.3 Schematron-equivalent validation rules
 * Generated by DDEX Rosetta
 * @generated 2025-09-04T20:06:51.042Z
 * @version 4.3
 */

class ERN43Rules {
  constructor() {
    this.version = '4.3';
    this.ruleCount = 211;
  }

  /**
   * Get all validation rules
   */
  getAllRules() {
    return [
      ...this.getStructuralRules(),
      ...this.getReferenceRules(),
      ...this.getIdentifierRules(),
      ...this.getDisplayRules(),
      ...this.getDealRules(),
      ...this.getConsistencyRules(),
      ...this.getBestPracticeRules(),
      ...this.getProfileRules()
    ];
  }

  /**
   * Structural validation rules
   */
  getStructuralRules() {
    return [
      {
        name: 'ERN43-ValidMessageType-Required',
        test: (doc) => {
          // Check for either NewReleaseMessage OR PurgeReleaseMessage
          // Handle both with and without namespace prefix
          const newRelease = this.findElements(doc, 'NewReleaseMessage').length > 0 ||
                            this.findElements(doc, 'ern:NewReleaseMessage').length > 0;
          const purgeRelease = this.findElements(doc, 'PurgeReleaseMessage').length > 0 ||
                              this.findElements(doc, 'ern:PurgeReleaseMessage').length > 0;
          return newRelease || purgeRelease;
        },
        message: 'Either NewReleaseMessage or PurgeReleaseMessage is required',
        severity: 'error'
      },
      {
        name: 'ERN43-AdditionalTitle-TitleText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'AdditionalTitle');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TitleText');
        return children.length > 0;
      });
    },
        message: 'TitleText is required in AdditionalTitle',
        severity: 'error'
      },
      {
        name: 'ERN43-AdministratingRecordCompanyWithReference-RecordCompanyPartyReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'AdministratingRecordCompanyWithReference');
      return parents.every(parent => {
        const children = this.findElements(parent, 'RecordCompanyPartyReference');
        return children.length > 0;
      });
    },
        message: 'RecordCompanyPartyReference is required in AdministratingRecordCompanyWithReference',
        severity: 'error'
      },
      {
        name: 'ERN43-AdministratingRecordCompanyWithReference-Role-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'AdministratingRecordCompanyWithReference');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Role');
        return children.length > 0;
      });
    },
        message: 'Role is required in AdministratingRecordCompanyWithReference',
        severity: 'error'
      },
      {
        name: 'ERN43-AudioDeliveryFile-Type-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'AudioDeliveryFile');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Type');
        return children.length > 0;
      });
    },
        message: 'Type is required in AudioDeliveryFile',
        severity: 'error'
      },
      {
        name: 'ERN43-AvRating-Rating-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'AvRating');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Rating');
        return children.length > 0;
      });
    },
        message: 'Rating is required in AvRating',
        severity: 'error'
      },
      {
        name: 'ERN43-AvRating-Agency-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'AvRating');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Agency');
        return children.length > 0;
      });
    },
        message: 'Agency is required in AvRating',
        severity: 'error'
      },
      {
        name: 'ERN43-CLineWithDefault-CLineText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'CLineWithDefault');
      return parents.every(parent => {
        const children = this.findElements(parent, 'CLineText');
        return children.length > 0;
      });
    },
        message: 'CLineText is required in CLineWithDefault',
        severity: 'error'
      },
      {
        name: 'ERN43-Chapter-ChapterReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Chapter');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ChapterReference');
        return children.length > 0;
      });
    },
        message: 'ChapterReference is required in Chapter',
        severity: 'error'
      },
      {
        name: 'ERN43-ChapterList-Chapter-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ChapterList');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Chapter');
        return children.length > 0;
      });
    },
        message: 'Chapter is required in ChapterList',
        severity: 'error'
      },
      {
        name: 'ERN43-Character-CharacterPartyReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Character');
      return parents.every(parent => {
        const children = this.findElements(parent, 'CharacterPartyReference');
        return children.length > 0;
      });
    },
        message: 'CharacterPartyReference is required in Character',
        severity: 'error'
      },
      {
        name: 'ERN43-ClipDetails-ClipType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ClipDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ClipType');
        return children.length > 0;
      });
    },
        message: 'ClipType is required in ClipDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-ClipDetails-ExpressionType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ClipDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ExpressionType');
        return children.length > 0;
      });
    },
        message: 'ExpressionType is required in ClipDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-ClipRelease-ReleaseReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ClipRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseReference');
        return children.length > 0;
      });
    },
        message: 'ReleaseReference is required in ClipRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-ClipRelease-ReleaseId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ClipRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseId');
        return children.length > 0;
      });
    },
        message: 'ReleaseId is required in ClipRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-ClipRelease-ReleaseResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ClipRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseResourceReference');
        return children.length > 0;
      });
    },
        message: 'ReleaseResourceReference is required in ClipRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-ClipRelease-ReleaseLabelReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ClipRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseLabelReference');
        return children.length > 0;
      });
    },
        message: 'ReleaseLabelReference is required in ClipRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-ClipRelease-Genre-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ClipRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Genre');
        return children.length > 0;
      });
    },
        message: 'Genre is required in ClipRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-ConditionForRightsClaimPolicy-Value-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ConditionForRightsClaimPolicy');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Value');
        return children.length > 0;
      });
    },
        message: 'Value is required in ConditionForRightsClaimPolicy',
        severity: 'error'
      },
      {
        name: 'ERN43-ConditionForRightsClaimPolicy-Unit-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ConditionForRightsClaimPolicy');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Unit');
        return children.length > 0;
      });
    },
        message: 'Unit is required in ConditionForRightsClaimPolicy',
        severity: 'error'
      },
      {
        name: 'ERN43-ConditionForRightsClaimPolicy-RelationalRelator-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ConditionForRightsClaimPolicy');
      return parents.every(parent => {
        const children = this.findElements(parent, 'RelationalRelator');
        return children.length > 0;
      });
    },
        message: 'RelationalRelator is required in ConditionForRightsClaimPolicy',
        severity: 'error'
      },
      {
        name: 'ERN43-Contributor-ContributorPartyReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Contributor');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ContributorPartyReference');
        return children.length > 0;
      });
    },
        message: 'ContributorPartyReference is required in Contributor',
        severity: 'error'
      },
      {
        name: 'ERN43-CoreArea-TopLeftCorner-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'CoreArea');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TopLeftCorner');
        return children.length > 0;
      });
    },
        message: 'TopLeftCorner is required in CoreArea',
        severity: 'error'
      },
      {
        name: 'ERN43-CoreArea-BottomRightCorner-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'CoreArea');
      return parents.every(parent => {
        const children = this.findElements(parent, 'BottomRightCorner');
        return children.length > 0;
      });
    },
        message: 'BottomRightCorner is required in CoreArea',
        severity: 'error'
      },
      {
        name: 'ERN43-CueSheet-CueSheetReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'CueSheet');
      return parents.every(parent => {
        const children = this.findElements(parent, 'CueSheetReference');
        return children.length > 0;
      });
    },
        message: 'CueSheetReference is required in CueSheet',
        severity: 'error'
      },
      {
        name: 'ERN43-CueSheet-CueSheetType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'CueSheet');
      return parents.every(parent => {
        const children = this.findElements(parent, 'CueSheetType');
        return children.length > 0;
      });
    },
        message: 'CueSheetType is required in CueSheet',
        severity: 'error'
      },
      {
        name: 'ERN43-CueSheet-Cue-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'CueSheet');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Cue');
        return children.length > 0;
      });
    },
        message: 'Cue is required in CueSheet',
        severity: 'error'
      },
      {
        name: 'ERN43-CueSheetList-CueSheet-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'CueSheetList');
      return parents.every(parent => {
        const children = this.findElements(parent, 'CueSheet');
        return children.length > 0;
      });
    },
        message: 'CueSheet is required in CueSheetList',
        severity: 'error'
      },
      {
        name: 'ERN43-DealList-ReleaseDeal-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DealList');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseDeal');
        return children.length > 0;
      });
    },
        message: 'ReleaseDeal is required in DealList',
        severity: 'error'
      },
      {
        name: 'ERN43-DealResourceReferenceList-DealResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DealResourceReferenceList');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DealResourceReference');
        return children.length > 0;
      });
    },
        message: 'DealResourceReference is required in DealResourceReferenceList',
        severity: 'error'
      },
      {
        name: 'ERN43-DealTechnicalResourceDetailsReferenceList-DealTechnicalResourceDetailsReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DealTechnicalResourceDetailsReferenceList');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DealTechnicalResourceDetailsReference');
        return children.length > 0;
      });
    },
        message: 'DealTechnicalResourceDetailsReference is required in DealTechnicalResourceDetailsReferenceList',
        severity: 'error'
      },
      {
        name: 'ERN43-DealTerms-ValidityPeriod-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DealTerms');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ValidityPeriod');
        return children.length > 0;
      });
    },
        message: 'ValidityPeriod is required in DealTerms',
        severity: 'error'
      },
      {
        name: 'ERN43-DelegatedUsageRights-UseType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DelegatedUsageRights');
      return parents.every(parent => {
        const children = this.findElements(parent, 'UseType');
        return children.length > 0;
      });
    },
        message: 'UseType is required in DelegatedUsageRights',
        severity: 'error'
      },
      {
        name: 'ERN43-DisplayArtist-ArtistPartyReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DisplayArtist');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ArtistPartyReference');
        return children.length > 0;
      });
    },
        message: 'ArtistPartyReference is required in DisplayArtist',
        severity: 'error'
      },
      {
        name: 'ERN43-DisplayArtist-DisplayArtistRole-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DisplayArtist');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayArtistRole');
        return children.length > 0;
      });
    },
        message: 'DisplayArtistRole is required in DisplayArtist',
        severity: 'error'
      },
      {
        name: 'ERN43-DisplayTitle-TitleText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DisplayTitle');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TitleText');
        return children.length > 0;
      });
    },
        message: 'TitleText is required in DisplayTitle',
        severity: 'error'
      },
      {
        name: 'ERN43-EditionContributor-ContributorPartyReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'EditionContributor');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ContributorPartyReference');
        return children.length > 0;
      });
    },
        message: 'ContributorPartyReference is required in EditionContributor',
        severity: 'error'
      },
      {
        name: 'ERN43-ExternalResourceLink-URL-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ExternalResourceLink');
      return parents.every(parent => {
        const children = this.findElements(parent, 'URL');
        return children.length > 0;
      });
    },
        message: 'URL is required in ExternalResourceLink',
        severity: 'error'
      },
      {
        name: 'ERN43-Fingerprint-Algorithm-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Fingerprint');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Algorithm');
        return children.length > 0;
      });
    },
        message: 'Algorithm is required in Fingerprint',
        severity: 'error'
      },
      {
        name: 'ERN43-Image-ResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Image');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceReference');
        return children.length > 0;
      });
    },
        message: 'ResourceReference is required in Image',
        severity: 'error'
      },
      {
        name: 'ERN43-Image-Type-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Image');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Type');
        return children.length > 0;
      });
    },
        message: 'Type is required in Image',
        severity: 'error'
      },
      {
        name: 'ERN43-Image-ResourceId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Image');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceId');
        return children.length > 0;
      });
    },
        message: 'ResourceId is required in Image',
        severity: 'error'
      },
      {
        name: 'ERN43-Party-PartyReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Party');
      return parents.every(parent => {
        const children = this.findElements(parent, 'PartyReference');
        return children.length > 0;
      });
    },
        message: 'PartyReference is required in Party',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyList-Party-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'PartyList');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Party');
        return children.length > 0;
      });
    },
        message: 'Party is required in PartyList',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyNameWithTerritory-FullName-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'PartyNameWithTerritory');
      return parents.every(parent => {
        const children = this.findElements(parent, 'FullName');
        return children.length > 0;
      });
    },
        message: 'FullName is required in PartyNameWithTerritory',
        severity: 'error'
      },
      {
        name: 'ERN43-PhysicalReturns-PhysicalReturnsAllowed-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'PhysicalReturns');
      return parents.every(parent => {
        const children = this.findElements(parent, 'PhysicalReturnsAllowed');
        return children.length > 0;
      });
    },
        message: 'PhysicalReturnsAllowed is required in PhysicalReturns',
        severity: 'error'
      },
      {
        name: 'ERN43-RelatedRelease-ReleaseRelationshipType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'RelatedRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseRelationshipType');
        return children.length > 0;
      });
    },
        message: 'ReleaseRelationshipType is required in RelatedRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-RelatedRelease-ReleaseId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'RelatedRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseId');
        return children.length > 0;
      });
    },
        message: 'ReleaseId is required in RelatedRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-RelatedResource-ResourceRelationshipType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'RelatedResource');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceRelationshipType');
        return children.length > 0;
      });
    },
        message: 'ResourceRelationshipType is required in RelatedResource',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-ReleaseReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseReference');
        return children.length > 0;
      });
    },
        message: 'ReleaseReference is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-ReleaseType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseType');
        return children.length > 0;
      });
    },
        message: 'ReleaseType is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-ReleaseId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseId');
        return children.length > 0;
      });
    },
        message: 'ReleaseId is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-DisplayTitleText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayTitleText');
        return children.length > 0;
      });
    },
        message: 'DisplayTitleText is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-DisplayTitle-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayTitle');
        return children.length > 0;
      });
    },
        message: 'DisplayTitle is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-DisplayArtistName-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayArtistName');
        return children.length > 0;
      });
    },
        message: 'DisplayArtistName is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-DisplayArtist-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayArtist');
        return children.length > 0;
      });
    },
        message: 'DisplayArtist is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-ReleaseLabelReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseLabelReference');
        return children.length > 0;
      });
    },
        message: 'ReleaseLabelReference is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-Genre-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Genre');
        return children.length > 0;
      });
    },
        message: 'Genre is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-ParentalWarningType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ParentalWarningType');
        return children.length > 0;
      });
    },
        message: 'ParentalWarningType is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-Release-ResourceGroup-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Release');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceGroup');
        return children.length > 0;
      });
    },
        message: 'ResourceGroup is required in Release',
        severity: 'error'
      },
      {
        name: 'ERN43-ReleaseAdmin-ReleaseAdminId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ReleaseAdmin');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseAdminId');
        return children.length > 0;
      });
    },
        message: 'ReleaseAdminId is required in ReleaseAdmin',
        severity: 'error'
      },
      {
        name: 'ERN43-ReleaseDeal-DealReleaseReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ReleaseDeal');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DealReleaseReference');
        return children.length > 0;
      });
    },
        message: 'DealReleaseReference is required in ReleaseDeal',
        severity: 'error'
      },
      {
        name: 'ERN43-ReleaseDeal-Deal-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ReleaseDeal');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Deal');
        return children.length > 0;
      });
    },
        message: 'Deal is required in ReleaseDeal',
        severity: 'error'
      },
      {
        name: 'ERN43-ReleaseVisibility-VisibilityReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ReleaseVisibility');
      return parents.every(parent => {
        const children = this.findElements(parent, 'VisibilityReference');
        return children.length > 0;
      });
    },
        message: 'VisibilityReference is required in ReleaseVisibility',
        severity: 'error'
      },
      {
        name: 'ERN43-ResourceGroupContentItem-ReleaseResourceReference-Required',
        test: (doc) => {
        const parents = this.findElements(doc, 'ResourceGroupContentItem');
        return parents.every(parent => {
          const children = this.findElements(parent, 'ReleaseResourceReference');
          return children.length > 0;
        });
      },
        message: 'ReleaseResourceReference is required in ResourceGroupContentItem',
        severity: 'error'
      },
      {
        name: 'ERN43-ResourceRightsController-RightsControllerPartyReference-Required',
        test: (doc) => {
        const parents = this.findElements(doc, 'ResourceRightsController');
        return parents.every(parent => {
          const children = this.findElements(parent, 'RightsControllerPartyReference');
          return children.length > 0;
        });
      },
        message: 'RightsControllerPartyReference is required in ResourceRightsController',
        severity: 'error'
      },
      {
        name: 'ERN43-ResourceSubGroup-ResourceGroupType-Attribute-Required',
        test: (doc) => {
          const elements = this.findElements(doc, 'ResourceSubGroup');
          console.log('ResourceSubGroup elements found:', elements.length);
          
          if (elements.length === 0) {
            console.log('No ResourceSubGroup elements, returning true');
            return true;
          }
          
          const result = elements.every(element => {
            const hasAttr = element['@_ResourceGroupType'] !== undefined;
            console.log('Element has ResourceGroupType attribute:', hasAttr);
            return hasAttr;
          });
          
          console.log('Final result:', result);
          return result;
        },
        message: 'Attribute ResourceGroupType is required in ResourceSubGroup',
        severity: 'error'
      },
      {
        name: 'ERN43-RightsClaimPolicy-RightsClaimPolicyType-Required',
        test: (doc) => {
        const parents = this.findElements(doc, 'RightsClaimPolicy');
        return parents.every(parent => {
          const children = this.findElements(parent, 'RightsClaimPolicyType');
          return children.length > 0;
        });
      },
        message: 'RightsClaimPolicyType is required in RightsClaimPolicy',
        severity: 'error'
      },
      {
        name: 'ERN43-Segment-StartTime-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Segment');
      return parents.every(parent => {
        const children = this.findElements(parent, 'StartTime');
        return children.length > 0;
      });
    },
        message: 'StartTime is required in Segment',
        severity: 'error'
      },
      {
        name: 'ERN43-SheetMusic-ResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SheetMusic');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceReference');
        return children.length > 0;
      });
    },
        message: 'ResourceReference is required in SheetMusic',
        severity: 'error'
      },
      {
        name: 'ERN43-SheetMusic-Type-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SheetMusic');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Type');
        return children.length > 0;
      });
    },
        message: 'Type is required in SheetMusic',
        severity: 'error'
      },
      {
        name: 'ERN43-SheetMusic-ResourceId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SheetMusic');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceId');
        return children.length > 0;
      });
    },
        message: 'ResourceId is required in SheetMusic',
        severity: 'error'
      },
      {
        name: 'ERN43-SheetMusic-DisplayArtistName-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SheetMusic');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayArtistName');
        return children.length > 0;
      });
    },
        message: 'DisplayArtistName is required in SheetMusic',
        severity: 'error'
      },
      {
        name: 'ERN43-Software-ResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Software');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceReference');
        return children.length > 0;
      });
    },
        message: 'ResourceReference is required in Software',
        severity: 'error'
      },
      {
        name: 'ERN43-Software-Type-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Software');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Type');
        return children.length > 0;
      });
    },
        message: 'Type is required in Software',
        severity: 'error'
      },
      {
        name: 'ERN43-Software-ResourceId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Software');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceId');
        return children.length > 0;
      });
    },
        message: 'ResourceId is required in Software',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-ResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecording');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceReference');
        return children.length > 0;
      });
    },
        message: 'ResourceReference is required in SoundRecording',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-Type-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecording');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Type');
        return children.length > 0;
      });
    },
        message: 'Type is required in SoundRecording',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-SoundRecordingEdition-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecording');
      return parents.every(parent => {
        const children = this.findElements(parent, 'SoundRecordingEdition');
        return children.length > 0;
      });
    },
        message: 'SoundRecordingEdition is required in SoundRecording',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-DisplayTitleText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecording');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayTitleText');
        return children.length > 0;
      });
    },
        message: 'DisplayTitleText is required in SoundRecording',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-DisplayTitle-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecording');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayTitle');
        return children.length > 0;
      });
    },
        message: 'DisplayTitle is required in SoundRecording',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-DisplayArtistName-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecording');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayArtistName');
        return children.length > 0;
      });
    },
        message: 'DisplayArtistName is required in SoundRecording',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-DisplayArtist-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecording');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayArtist');
        return children.length > 0;
      });
    },
        message: 'DisplayArtist is required in SoundRecording',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-Duration-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecording');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Duration');
        return children.length > 0;
      });
    },
        message: 'Duration is required in SoundRecording',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-ParentalWarningType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecording');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ParentalWarningType');
        return children.length > 0;
      });
    },
        message: 'ParentalWarningType is required in SoundRecording',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecordingClipDetails-TechnicalResourceDetailsReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecordingClipDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TechnicalResourceDetailsReference');
        return children.length > 0;
      });
    },
        message: 'TechnicalResourceDetailsReference is required in SoundRecordingClipDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecordingClipDetails-ClipType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecordingClipDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ClipType');
        return children.length > 0;
      });
    },
        message: 'ClipType is required in SoundRecordingClipDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecordingClipDetails-ExpressionType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecordingClipDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ExpressionType');
        return children.length > 0;
      });
    },
        message: 'ExpressionType is required in SoundRecordingClipDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecordingEdition-ResourceId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SoundRecordingEdition');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceId');
        return children.length > 0;
      });
    },
        message: 'ResourceId is required in SoundRecordingEdition',
        severity: 'error'
      },
      {
        name: 'ERN43-SupplementalDocumentList-SupplementalDocument-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SupplementalDocumentList');
      return parents.every(parent => {
        const children = this.findElements(parent, 'SupplementalDocument');
        return children.length > 0;
      });
    },
        message: 'SupplementalDocument is required in SupplementalDocumentList',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalImageDetails-TechnicalResourceDetailsReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TechnicalImageDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TechnicalResourceDetailsReference');
        return children.length > 0;
      });
    },
        message: 'TechnicalResourceDetailsReference is required in TechnicalImageDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalSheetMusicDetails-TechnicalResourceDetailsReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TechnicalSheetMusicDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TechnicalResourceDetailsReference');
        return children.length > 0;
      });
    },
        message: 'TechnicalResourceDetailsReference is required in TechnicalSheetMusicDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalSoftwareDetails-TechnicalResourceDetailsReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TechnicalSoftwareDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TechnicalResourceDetailsReference');
        return children.length > 0;
      });
    },
        message: 'TechnicalResourceDetailsReference is required in TechnicalSoftwareDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalSoundRecordingDetails-TechnicalResourceDetailsReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TechnicalSoundRecordingDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TechnicalResourceDetailsReference');
        return children.length > 0;
      });
    },
        message: 'TechnicalResourceDetailsReference is required in TechnicalSoundRecordingDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalTextDetails-TechnicalResourceDetailsReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TechnicalTextDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TechnicalResourceDetailsReference');
        return children.length > 0;
      });
    },
        message: 'TechnicalResourceDetailsReference is required in TechnicalTextDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalVideoDetails-TechnicalResourceDetailsReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TechnicalVideoDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TechnicalResourceDetailsReference');
        return children.length > 0;
      });
    },
        message: 'TechnicalResourceDetailsReference is required in TechnicalVideoDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-Text-ResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Text');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceReference');
        return children.length > 0;
      });
    },
        message: 'ResourceReference is required in Text',
        severity: 'error'
      },
      {
        name: 'ERN43-Text-Type-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Text');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Type');
        return children.length > 0;
      });
    },
        message: 'Type is required in Text',
        severity: 'error'
      },
      {
        name: 'ERN43-Timing-StartPoint-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Timing');
      return parents.every(parent => {
        const children = this.findElements(parent, 'StartPoint');
        return children.length > 0;
      });
    },
        message: 'StartPoint is required in Timing',
        severity: 'error'
      },
      {
        name: 'ERN43-Title-TitleText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Title');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TitleText');
        return children.length > 0;
      });
    },
        message: 'TitleText is required in Title',
        severity: 'error'
      },
      {
        name: 'ERN43-TrackRelease-ReleaseReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TrackRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseReference');
        return children.length > 0;
      });
    },
        message: 'ReleaseReference is required in TrackRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-TrackRelease-ReleaseId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TrackRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseId');
        return children.length > 0;
      });
    },
        message: 'ReleaseId is required in TrackRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-TrackRelease-ReleaseResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TrackRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseResourceReference');
        return children.length > 0;
      });
    },
        message: 'ReleaseResourceReference is required in TrackRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-TrackRelease-ReleaseLabelReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TrackRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ReleaseLabelReference');
        return children.length > 0;
      });
    },
        message: 'ReleaseLabelReference is required in TrackRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-TrackRelease-Genre-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TrackRelease');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Genre');
        return children.length > 0;
      });
    },
        message: 'Genre is required in TrackRelease',
        severity: 'error'
      },
      {
        name: 'ERN43-TrackReleaseVisibility-VisibilityReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TrackReleaseVisibility');
      return parents.every(parent => {
        const children = this.findElements(parent, 'VisibilityReference');
        return children.length > 0;
      });
    },
        message: 'VisibilityReference is required in TrackReleaseVisibility',
        severity: 'error'
      },
      {
        name: 'ERN43-TrackReleaseVisibility-TrackListingPreviewStartDateTime-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TrackReleaseVisibility');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TrackListingPreviewStartDateTime');
        return children.length > 0;
      });
    },
        message: 'TrackListingPreviewStartDateTime is required in TrackReleaseVisibility',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-ResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Video');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceReference');
        return children.length > 0;
      });
    },
        message: 'ResourceReference is required in Video',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-Type-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Video');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Type');
        return children.length > 0;
      });
    },
        message: 'Type is required in Video',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-VideoEdition-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Video');
      return parents.every(parent => {
        const children = this.findElements(parent, 'VideoEdition');
        return children.length > 0;
      });
    },
        message: 'VideoEdition is required in Video',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-DisplayTitleText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Video');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayTitleText');
        return children.length > 0;
      });
    },
        message: 'DisplayTitleText is required in Video',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-DisplayTitle-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Video');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayTitle');
        return children.length > 0;
      });
    },
        message: 'DisplayTitle is required in Video',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-DisplayArtistName-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Video');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayArtistName');
        return children.length > 0;
      });
    },
        message: 'DisplayArtistName is required in Video',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-DisplayArtist-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Video');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayArtist');
        return children.length > 0;
      });
    },
        message: 'DisplayArtist is required in Video',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-Duration-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Video');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Duration');
        return children.length > 0;
      });
    },
        message: 'Duration is required in Video',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-ParentalWarningType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Video');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ParentalWarningType');
        return children.length > 0;
      });
    },
        message: 'ParentalWarningType is required in Video',
        severity: 'error'
      },
      {
        name: 'ERN43-VideoClipDetails-TechnicalResourceDetailsReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'VideoClipDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'TechnicalResourceDetailsReference');
        return children.length > 0;
      });
    },
        message: 'TechnicalResourceDetailsReference is required in VideoClipDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-VideoClipDetails-ClipType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'VideoClipDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ClipType');
        return children.length > 0;
      });
    },
        message: 'ClipType is required in VideoClipDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-VideoClipDetails-ExpressionType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'VideoClipDetails');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ExpressionType');
        return children.length > 0;
      });
    },
        message: 'ExpressionType is required in VideoClipDetails',
        severity: 'error'
      },
      {
        name: 'ERN43-VideoDeliveryFile-Type-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'VideoDeliveryFile');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Type');
        return children.length > 0;
      });
    },
        message: 'Type is required in VideoDeliveryFile',
        severity: 'error'
      },
      {
        name: 'ERN43-VideoEdition-ResourceId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'VideoEdition');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceId');
        return children.length > 0;
      });
    },
        message: 'ResourceId is required in VideoEdition',
        severity: 'error'
      },
      {
        name: 'ERN43-WorkRightsController-RightsControllerPartyReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'WorkRightsController');
      return parents.every(parent => {
        const children = this.findElements(parent, 'RightsControllerPartyReference');
        return children.length > 0;
      });
    },
        message: 'RightsControllerPartyReference is required in WorkRightsController',
        severity: 'error'
      },
      {
        name: 'ERN43-Affiliation-Type-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'Affiliation');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Type');
        return children.length > 0;
      });
    },
        message: 'Type is required in Affiliation',
        severity: 'error'
      },
      {
        name: 'ERN43-CLine-CLineText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'CLine');
      return parents.every(parent => {
        const children = this.findElements(parent, 'CLineText');
        return children.length > 0;
      });
    },
        message: 'CLineText is required in CLine',
        severity: 'error'
      },
      {
        name: 'ERN43-DetailedHashSum-Algorithm-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DetailedHashSum');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Algorithm');
        return children.length > 0;
      });
    },
        message: 'Algorithm is required in DetailedHashSum',
        severity: 'error'
      },
      {
        name: 'ERN43-DetailedHashSum-HashSumValue-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DetailedHashSum');
      return parents.every(parent => {
        const children = this.findElements(parent, 'HashSumValue');
        return children.length > 0;
      });
    },
        message: 'HashSumValue is required in DetailedHashSum',
        severity: 'error'
      },
      {
        name: 'ERN43-DisplayCredits-DisplayCreditText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'DisplayCredits');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DisplayCreditText');
        return children.length > 0;
      });
    },
        message: 'DisplayCreditText is required in DisplayCredits',
        severity: 'error'
      },
      {
        name: 'ERN43-File-URI-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'File');
      return parents.every(parent => {
        const children = this.findElements(parent, 'URI');
        return children.length > 0;
      });
    },
        message: 'URI is required in File',
        severity: 'error'
      },
      {
        name: 'ERN43-FulfillmentDateWithTerritory-FulfillmentDate-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'FulfillmentDateWithTerritory');
      return parents.every(parent => {
        const children = this.findElements(parent, 'FulfillmentDate');
        return children.length > 0;
      });
    },
        message: 'FulfillmentDate is required in FulfillmentDateWithTerritory',
        severity: 'error'
      },
      {
        name: 'ERN43-GenreCategory-Value-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'GenreCategory');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Value');
        return children.length > 0;
      });
    },
        message: 'Value is required in GenreCategory',
        severity: 'error'
      },
      {
        name: 'ERN43-GenreWithTerritory-GenreText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'GenreWithTerritory');
      return parents.every(parent => {
        const children = this.findElements(parent, 'GenreText');
        return children.length > 0;
      });
    },
        message: 'GenreText is required in GenreWithTerritory',
        severity: 'error'
      },
      {
        name: 'ERN43-MessageAuditTrail-MessageAuditTrailEvent-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'MessageAuditTrail');
      return parents.every(parent => {
        const children = this.findElements(parent, 'MessageAuditTrailEvent');
        return children.length > 0;
      });
    },
        message: 'MessageAuditTrailEvent is required in MessageAuditTrail',
        severity: 'error'
      },
      {
        name: 'ERN43-MessageAuditTrailEvent-MessagingPartyDescriptor-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'MessageAuditTrailEvent');
      return parents.every(parent => {
        const children = this.findElements(parent, 'MessagingPartyDescriptor');
        return children.length > 0;
      });
    },
        message: 'MessagingPartyDescriptor is required in MessageAuditTrailEvent',
        severity: 'error'
      },
      {
        name: 'ERN43-MessageAuditTrailEvent-DateTime-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'MessageAuditTrailEvent');
      return parents.every(parent => {
        const children = this.findElements(parent, 'DateTime');
        return children.length > 0;
      });
    },
        message: 'DateTime is required in MessageAuditTrailEvent',
        severity: 'error'
      },
      {
        name: 'ERN43-MessageHeader-MessageId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'MessageHeader');
      return parents.every(parent => {
        const children = this.findElements(parent, 'MessageId');
        return children.length > 0;
      });
    },
        message: 'MessageId is required in MessageHeader',
        severity: 'error'
      },
      {
        name: 'ERN43-MessageHeader-MessageSender-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'MessageHeader');
      return parents.every(parent => {
        const children = this.findElements(parent, 'MessageSender');
        return children.length > 0;
      });
    },
        message: 'MessageSender is required in MessageHeader',
        severity: 'error'
      },
      {
        name: 'ERN43-MessageHeader-MessageRecipient-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'MessageHeader');
      return parents.every(parent => {
        const children = this.findElements(parent, 'MessageRecipient');
        return children.length > 0;
      });
    },
        message: 'MessageRecipient is required in MessageHeader',
        severity: 'error'
      },
      {
        name: 'ERN43-MessageHeader-MessageCreatedDateTime-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'MessageHeader');
      return parents.every(parent => {
        const children = this.findElements(parent, 'MessageCreatedDateTime');
        return children.length > 0;
      });
    },
        message: 'MessageCreatedDateTime is required in MessageHeader',
        severity: 'error'
      },
      {
        name: 'ERN43-MessagingPartyWithoutCode-PartyId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'MessagingPartyWithoutCode');
      return parents.every(parent => {
        const children = this.findElements(parent, 'PartyId');
        return children.length > 0;
      });
    },
        message: 'PartyId is required in MessagingPartyWithoutCode',
        severity: 'error'
      },
      {
        name: 'ERN43-PLine-PLineText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'PLine');
      return parents.every(parent => {
        const children = this.findElements(parent, 'PLineText');
        return children.length > 0;
      });
    },
        message: 'PLineText is required in PLine',
        severity: 'error'
      },
      {
        name: 'ERN43-PLineWithDefault-PLineText-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'PLineWithDefault');
      return parents.every(parent => {
        const children = this.findElements(parent, 'PLineText');
        return children.length > 0;
      });
    },
        message: 'PLineText is required in PLineWithDefault',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyName-FullName-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'PartyName');
      return parents.every(parent => {
        const children = this.findElements(parent, 'FullName');
        return children.length > 0;
      });
    },
        message: 'FullName is required in PartyName',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyNameWithoutCode-FullName-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'PartyNameWithoutCode');
      return parents.every(parent => {
        const children = this.findElements(parent, 'FullName');
        return children.length > 0;
      });
    },
        message: 'FullName is required in PartyNameWithoutCode',
        severity: 'error'
      },
      {
        name: 'ERN43-RelatedParty-PartyRelatedPartyReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'RelatedParty');
      return parents.every(parent => {
        const children = this.findElements(parent, 'PartyRelatedPartyReference');
        return children.length > 0;
      });
    },
        message: 'PartyRelatedPartyReference is required in RelatedParty',
        severity: 'error'
      },
      {
        name: 'ERN43-RelatedParty-PartyRelationshipType-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'RelatedParty');
      return parents.every(parent => {
        const children = this.findElements(parent, 'PartyRelationshipType');
        return children.length > 0;
      });
    },
        message: 'PartyRelationshipType is required in RelatedParty',
        severity: 'error'
      },
      {
        name: 'ERN43-ResourceContainedResourceReference-ResourceContainedResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ResourceContainedResourceReference');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceContainedResourceReference');
        return children.length > 0;
      });
    },
        message: 'ResourceContainedResourceReference is required in ResourceContainedResourceReference',
        severity: 'error'
      },
      {
        name: 'ERN43-ResourceContainedResourceReferenceList-ResourceContainedResourceReference-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ResourceContainedResourceReferenceList');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ResourceContainedResourceReference');
        return children.length > 0;
      });
    },
        message: 'ResourceContainedResourceReference is required in ResourceContainedResourceReferenceList',
        severity: 'error'
      },
      {
        name: 'ERN43-ResourceProprietaryId-ProprietaryId-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'ResourceProprietaryId');
      return parents.every(parent => {
        const children = this.findElements(parent, 'ProprietaryId');
        return children.length > 0;
      });
    },
        message: 'ProprietaryId is required in ResourceProprietaryId',
        severity: 'error'
      },
      {
        name: 'ERN43-SubGenreCategory-Value-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'SubGenreCategory');
      return parents.every(parent => {
        const children = this.findElements(parent, 'Value');
        return children.length > 0;
      });
    },
        message: 'Value is required in SubGenreCategory',
        severity: 'error'
      },
      {
        name: 'ERN43-TitleDisplayInformation-IsDisplayedInTitle-Required',
        test: (doc) => {
      const parents = this.findElements(doc, 'TitleDisplayInformation');
      return parents.every(parent => {
        const children = this.findElements(parent, 'IsDisplayedInTitle');
        return children.length > 0;
      });
    },
        message: 'IsDisplayedInTitle is required in TitleDisplayInformation',
        severity: 'error'
      },
      {
        name: 'ERN43-AdditionalTitle-Namespace-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'AdditionalTitle');
      return elements.every(element => {
        const value = element['@_Namespace'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute Namespace in AdditionalTitle must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-AdditionalTitle-UserDefinedValue-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'AdditionalTitle');
      return elements.every(element => {
        const value = element['@_UserDefinedValue'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute UserDefinedValue in AdditionalTitle must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-AdditionalTitle-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'AdditionalTitle');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in AdditionalTitle must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-AdditionalTitle-IsInOriginalLanguage-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'AdditionalTitle');
      return elements.every(element => {
        const value = element['@_IsInOriginalLanguage'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsInOriginalLanguage in AdditionalTitle must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-AvRating-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'AvRating');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in AvRating must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-CLineWithDefault-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'CLineWithDefault');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in CLineWithDefault must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-CLineWithDefault-LanguageAndScriptCode-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'CLineWithDefault');
      return elements.every(element => {
        const value = element['@_LanguageAndScriptCode'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute LanguageAndScriptCode in CLineWithDefault must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-Character-SequenceNumber-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'Character');
      return elements.every(element => {
        const value = element['@_SequenceNumber'];
        if (value === undefined) return true;
        return !isNaN(parseInt(value, 10));
      });
    },
        message: 'Attribute SequenceNumber in Character must be of type xs:integer',
        severity: 'error'
      },
      {
        name: 'ERN43-Contributor-SequenceNumber-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'Contributor');
      return elements.every(element => {
        const value = element['@_SequenceNumber'];
        if (value === undefined) return true;
        return !isNaN(parseInt(value, 10));
      });
    },
        message: 'Attribute SequenceNumber in Contributor must be of type xs:integer',
        severity: 'error'
      },
      {
        name: 'ERN43-DetailedResourceContributor-SequenceNumber-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'DetailedResourceContributor');
      return elements.every(element => {
        const value = element['@_SequenceNumber'];
        if (value === undefined) return true;
        return !isNaN(parseInt(value, 10));
      });
    },
        message: 'Attribute SequenceNumber in DetailedResourceContributor must be of type xs:integer',
        severity: 'error'
      },
      {
        name: 'ERN43-DisplayArtist-SequenceNumber-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'DisplayArtist');
      return elements.every(element => {
        const value = element['@_SequenceNumber'];
        if (value === undefined) return true;
        return !isNaN(parseInt(value, 10));
      });
    },
        message: 'Attribute SequenceNumber in DisplayArtist must be of type xs:integer',
        severity: 'error'
      },
      {
        name: 'ERN43-DisplayTitle-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'DisplayTitle');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in DisplayTitle must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-DisplayTitle-IsInOriginalLanguage-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'DisplayTitle');
      return elements.every(element => {
        const value = element['@_IsInOriginalLanguage'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsInOriginalLanguage in DisplayTitle must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-EditionContributor-SequenceNumber-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'EditionContributor');
      return elements.every(element => {
        const value = element['@_SequenceNumber'];
        if (value === undefined) return true;
        return !isNaN(parseInt(value, 10));
      });
    },
        message: 'Attribute SequenceNumber in EditionContributor must be of type xs:integer',
        severity: 'error'
      },
      {
        name: 'ERN43-Image-IsSupplemental-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'Image');
      return elements.every(element => {
        const value = element['@_IsSupplemental'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsSupplemental in Image must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyNameWithTerritory-LanguageAndScriptCode-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PartyNameWithTerritory');
      return elements.every(element => {
        const value = element['@_LanguageAndScriptCode'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute LanguageAndScriptCode in PartyNameWithTerritory must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyNameWithTerritory-IsNickname-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PartyNameWithTerritory');
      return elements.every(element => {
        const value = element['@_IsNickname'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsNickname in PartyNameWithTerritory must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyNameWithTerritory-IsStageName-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PartyNameWithTerritory');
      return elements.every(element => {
        const value = element['@_IsStageName'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsStageName in PartyNameWithTerritory must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyNameWithTerritory-IsLegalName-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PartyNameWithTerritory');
      return elements.every(element => {
        const value = element['@_IsLegalName'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsLegalName in PartyNameWithTerritory must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyNameWithTerritory-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PartyNameWithTerritory');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in PartyNameWithTerritory must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyNameWithTerritory-IsInOriginalLanguage-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PartyNameWithTerritory');
      return elements.every(element => {
        const value = element['@_IsInOriginalLanguage'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsInOriginalLanguage in PartyNameWithTerritory must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-PriceInformationWithType-Namespace-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PriceInformationWithType');
      return elements.every(element => {
        const value = element['@_Namespace'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute Namespace in PriceInformationWithType must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-PriceInformationWithType-UserDefinedValue-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PriceInformationWithType');
      return elements.every(element => {
        const value = element['@_UserDefinedValue'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute UserDefinedValue in PriceInformationWithType must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-ReleaseVisibility-DoNotDisplayDates-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'ReleaseVisibility');
      return elements.every(element => {
        const value = element['@_DoNotDisplayDates'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute DoNotDisplayDates in ReleaseVisibility must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-ResourceRightsController-SequenceNumber-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'ResourceRightsController');
      return elements.every(element => {
        const value = element['@_SequenceNumber'];
        if (value === undefined) return true;
        return !isNaN(parseInt(value, 10));
      });
    },
        message: 'Attribute SequenceNumber in ResourceRightsController must be of type xs:integer',
        severity: 'error'
      },
      {
        name: 'ERN43-SheetMusic-IsSupplemental-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'SheetMusic');
      return elements.every(element => {
        const value = element['@_IsSupplemental'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsSupplemental in SheetMusic must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-Software-IsSupplemental-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'Software');
      return elements.every(element => {
        const value = element['@_IsSupplemental'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsSupplemental in Software must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-IsSupplemental-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'SoundRecording');
      return elements.every(element => {
        const value = element['@_IsSupplemental'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsSupplemental in SoundRecording must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecording-ApplyClassicalProfileVariant-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'SoundRecording');
      return elements.every(element => {
        const value = element['@_ApplyClassicalProfileVariant'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute ApplyClassicalProfileVariant in SoundRecording must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalImageDetails-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TechnicalImageDetails');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in TechnicalImageDetails must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalSheetMusicDetails-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TechnicalSheetMusicDetails');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in TechnicalSheetMusicDetails must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalSoftwareDetails-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TechnicalSoftwareDetails');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in TechnicalSoftwareDetails must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalSoundRecordingDetails-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TechnicalSoundRecordingDetails');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in TechnicalSoundRecordingDetails must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalTextDetails-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TechnicalTextDetails');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in TechnicalTextDetails must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-TechnicalVideoDetails-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TechnicalVideoDetails');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in TechnicalVideoDetails must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-Text-IsSupplemental-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'Text');
      return elements.every(element => {
        const value = element['@_IsSupplemental'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsSupplemental in Text must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-Title-LanguageAndScriptCode-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'Title');
      return elements.every(element => {
        const value = element['@_LanguageAndScriptCode'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute LanguageAndScriptCode in Title must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-TrackRelease-IsMainRelease-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TrackRelease');
      return elements.every(element => {
        const value = element['@_IsMainRelease'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsMainRelease in TrackRelease must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-TrackReleaseVisibility-DoNotDisplayDates-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TrackReleaseVisibility');
      return elements.every(element => {
        const value = element['@_DoNotDisplayDates'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute DoNotDisplayDates in TrackReleaseVisibility must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-IsSupplemental-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'Video');
      return elements.every(element => {
        const value = element['@_IsSupplemental'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsSupplemental in Video must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-Video-ApplyClassicalProfileVariant-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'Video');
      return elements.every(element => {
        const value = element['@_ApplyClassicalProfileVariant'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute ApplyClassicalProfileVariant in Video must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-CLine-LanguageAndScriptCode-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'CLine');
      return elements.every(element => {
        const value = element['@_LanguageAndScriptCode'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute LanguageAndScriptCode in CLine must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-DisplayCredits-LanguageAndScriptCode-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'DisplayCredits');
      return elements.every(element => {
        const value = element['@_LanguageAndScriptCode'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute LanguageAndScriptCode in DisplayCredits must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-DisplayCredits-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'DisplayCredits');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in DisplayCredits must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-FulfillmentDateWithTerritory-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'FulfillmentDateWithTerritory');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in FulfillmentDateWithTerritory must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-GenreWithTerritory-LanguageAndScriptCode-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'GenreWithTerritory');
      return elements.every(element => {
        const value = element['@_LanguageAndScriptCode'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute LanguageAndScriptCode in GenreWithTerritory must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-GenreWithTerritory-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'GenreWithTerritory');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in GenreWithTerritory must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-MusicalWorkId-IsReplaced-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'MusicalWorkId');
      return elements.every(element => {
        const value = element['@_IsReplaced'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsReplaced in MusicalWorkId must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-PLine-LanguageAndScriptCode-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PLine');
      return elements.every(element => {
        const value = element['@_LanguageAndScriptCode'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute LanguageAndScriptCode in PLine must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-PLineWithDefault-IsDefault-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PLineWithDefault');
      return elements.every(element => {
        const value = element['@_IsDefault'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsDefault in PLineWithDefault must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-PLineWithDefault-LanguageAndScriptCode-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PLineWithDefault');
      return elements.every(element => {
        const value = element['@_LanguageAndScriptCode'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute LanguageAndScriptCode in PLineWithDefault must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-PartyName-LanguageAndScriptCode-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'PartyName');
      return elements.every(element => {
        const value = element['@_LanguageAndScriptCode'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute LanguageAndScriptCode in PartyName must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-ResourceId-IsReplaced-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'ResourceId');
      return elements.every(element => {
        const value = element['@_IsReplaced'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsReplaced in ResourceId must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-ResourceProprietaryId-IsReplaced-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'ResourceProprietaryId');
      return elements.every(element => {
        const value = element['@_IsReplaced'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsReplaced in ResourceProprietaryId must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-SheetMusicId-IsReplaced-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'SheetMusicId');
      return elements.every(element => {
        const value = element['@_IsReplaced'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsReplaced in SheetMusicId must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-SoundRecordingId-IsReplaced-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'SoundRecordingId');
      return elements.every(element => {
        const value = element['@_IsReplaced'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsReplaced in SoundRecordingId must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-TextId-IsReplaced-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TextId');
      return elements.every(element => {
        const value = element['@_IsReplaced'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsReplaced in TextId must be of type xs:boolean',
        severity: 'error'
      },
      {
        name: 'ERN43-TitleDisplayInformation-LanguageAndScriptCode-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TitleDisplayInformation');
      return elements.every(element => {
        const value = element['@_LanguageAndScriptCode'];
        if (value === undefined) return true;
        return true;
      });
    },
        message: 'Attribute LanguageAndScriptCode in TitleDisplayInformation must be of type xs:string',
        severity: 'error'
      },
      {
        name: 'ERN43-TitleDisplayInformation-SequenceNumber-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'TitleDisplayInformation');
      return elements.every(element => {
        const value = element['@_SequenceNumber'];
        if (value === undefined) return true;
        return !isNaN(parseInt(value, 10));
      });
    },
        message: 'Attribute SequenceNumber in TitleDisplayInformation must be of type xs:integer',
        severity: 'error'
      },
      {
        name: 'ERN43-VideoId-IsReplaced-Type',
        test: (doc) => {
      const elements = this.findElements(doc, 'VideoId');
      return elements.every(element => {
        const value = element['@_IsReplaced'];
        if (value === undefined) return true;
        return (value === "true" || value === "false");
      });
    },
        message: 'Attribute IsReplaced in VideoId must be of type xs:boolean',
        severity: 'error'
      }
    ];
  }

  /**
   * Reference validation rules
   */
  getReferenceRules() {
    return [

    ];
  }

  /**
   * Identifier validation rules
   */
  getIdentifierRules() {
    return [

    ];
  }

  /**
   * Display validation rules
   */
  getDisplayRules() {
    return [

    ];
  }

  /**
   * Deal validation rules
   */
  getDealRules() {
    return [

    ];
  }

  /**
   * Consistency validation rules
   */
  getConsistencyRules() {
    return [

    ];
  }

  /**
   * BestPractice validation rules
   */
  getBestPracticeRules() {
    return [

    ];
  }

  /**
   * Profile validation rules
   */
  getProfileRules() {
    return [

    ];
  }

  // ==========================================
  // Helper Methods
  // ==========================================

  /**
   * Get value from node
   */
  getValue(node) {
    if (!node) return null;
    if (typeof node === 'string') return node;
    if (node['#text']) return node['#text'];
    if (node['_']) return node['_'];
    if (node['$']) return node['$'];
    return node;
  }

  /**
   * Find elements by name
   */
  findElements(doc, elementName, parent = null) {
    const root = parent || doc;
    const parts = elementName.split('.');
    let current = root;
    
    // Add logging
    if (elementName === 'ResourceSubGroup') {
      console.log('Looking for ResourceSubGroup in:', Object.keys(root));
    }
    
    for (const part of parts) {
      if (!current || !current[part]) {
        if (elementName === 'ResourceSubGroup') {
          console.log(`No ${part} found in current level`);
        }
        return [];
      }
      current = current[part];
    }
    
    const result = Array.isArray(current) ? current : [current];
    
    if (elementName === 'ResourceSubGroup') {
      console.log(`Found ${result.length} ResourceSubGroup elements`);
    }
    
    return result;
  }

  /**
   * Get all releases
   */
  getReleases(doc) {
    const releases = [];
    
    if (doc.ReleaseList?.Release) {
      const items = Array.isArray(doc.ReleaseList.Release) 
        ? doc.ReleaseList.Release 
        : [doc.ReleaseList.Release];
      releases.push(...items);
    }
    
    return releases;
  }

  /**
   * Get all resources
   */
  getResources(doc) {
    const resources = [];
    
    if (doc.ResourceList) {
      const types = ['SoundRecording', 'Video', 'Image', 'Text'];
      
      for (const type of types) {
        if (doc.ResourceList[type]) {
          const items = Array.isArray(doc.ResourceList[type])
            ? doc.ResourceList[type]
            : [doc.ResourceList[type]];
          resources.push(...items.map(item => ({ [type]: item, type })));
        }
      }
    }
    
    return resources;
  }

  /**
   * Get all deals
   */
  getDeals(doc) {
    const deals = [];
    const releases = this.getReleases(doc);
    
    releases.forEach(release => {
      if (release.ReleaseDeal) {
        const releaseDeals = Array.isArray(release.ReleaseDeal)
          ? release.ReleaseDeal
          : [release.ReleaseDeal];
        deals.push(...releaseDeals);
      }
    });
    
    return deals;
  }

  /**
   * Get all parties
   */
  getParties(doc) {
    const parties = [];
    
    if (doc.PartyList?.Party) {
      const items = Array.isArray(doc.PartyList.Party)
        ? doc.PartyList.Party
        : [doc.PartyList.Party];
      parties.push(...items);
    }
    
    return parties;
  }

  /**
   * Check if value matches pattern
   */
  matchesPattern(value, pattern) {
    if (!value) return false;
    const regex = new RegExp(pattern);
    return regex.test(String(value));
  }

  /**
   * Validate date format
   */
  isValidDate(dateString) {
    if (!dateString) return false;
    const date = new Date(dateString);
    return !isNaN(date.getTime());
  }

  /**
   * Compare dates
   */
  compareDates(date1, date2, operator = 'lt') {
    const d1 = new Date(date1);
    const d2 = new Date(date2);
    
    switch (operator) {
      case 'lt': return d1 < d2;
      case 'lte': return d1 <= d2;
      case 'gt': return d1 > d2;
      case 'gte': return d1 >= d2;
      case 'eq': return d1.getTime() === d2.getTime();
      default: return false;
    }
  }
}

module.exports = ERN43Rules;